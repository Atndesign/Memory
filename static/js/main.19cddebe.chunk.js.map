{"version":3,"sources":["components/card.jsx","components/main.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","data-card","this","props","data","className","style","width","height","margin","spacing","onClick","e","handleCardFlip","backgroundImage","img","Component","Main","init","document","querySelectorAll","forEach","card","classList","remove","cards","currentFlipped","pairs","found","setTimeout","generateCardsArr","i","nbrPairs","push","shuffleArr","generateCards","sort","Math","random","cardItem","length","state","gameSize","containerX","x","containerY","y","isFlipped","setState","checkCards","dataset","element","add","contains","children","checkWin","console","log","event","currentTarget","handleNewSize","parseInt","target","value","split","nbrFlipped","flipped","Fragment","name","id","onChange","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.19cddebe.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        data-card={this.props.data}\r\n        className=\"flip-card\"\r\n        style={{\r\n          width: this.props.width + \"px\",\r\n          height: this.props.height + \"px\",\r\n          margin: this.props.spacing + \"px\",\r\n        }}\r\n        onClick={(e) => this.props.handleCardFlip(e)}\r\n      >\r\n        <div className=\"flip-card-inner\">\r\n          <div className=\"flip-card-front\">\r\n            <b className=\"question-mark\">?</b>\r\n          </div>\r\n          <div\r\n            className=\"flip-card-back\"\r\n            style={{\r\n              backgroundImage: `url('https://picsum.photos/${this.props.width}/${this.props.height}?random=${this.props.img}')`,\r\n            }}\r\n          ></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./card\";\r\n\r\nlet x = 2;\r\nlet y = 2;\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      gameSize: {\r\n        x: x,\r\n        y: y,\r\n        containerX: 600,\r\n        containerY: 600,\r\n        spacing: 16,\r\n      },\r\n      cards: 0,\r\n      nbrFlipped: 0,\r\n      flipped: [],\r\n    };\r\n    this.nbrPairs = 2;\r\n    this.cards = [];\r\n    this.currentFlipped = [];\r\n    this.pairs = [];\r\n    this.found = [];\r\n  }\r\n  componentWillMount() {\r\n    this.init();\r\n  }\r\n  init = () => {\r\n    document.querySelectorAll(`.flip-card`).forEach((card) => {\r\n      card.classList.remove(\"won\", \"flipped\");\r\n    });\r\n    this.cards = [];\r\n    this.currentFlipped = [];\r\n    this.pairs = [];\r\n    this.found = [];\r\n    setTimeout(() => {\r\n      this.generateCardsArr();\r\n    }, 100);\r\n  };\r\n  generateCardsArr = () => {\r\n    for (let i = 0; i < this.nbrPairs; i++) {\r\n      this.pairs.push(i, i);\r\n    }\r\n    this.shuffleArr();\r\n    this.generateCards();\r\n  };\r\n\r\n  shuffleArr = () => {\r\n    this.pairs = this.pairs.sort(() => 0.5 - Math.random());\r\n  };\r\n\r\n  generateCards = () => {\r\n    for (let cardItem = 0; cardItem < this.pairs.length; cardItem++) {\r\n      this.cards.push(\r\n        <Card\r\n          data={this.pairs[cardItem]}\r\n          width={\r\n            this.state.gameSize.containerX / this.state.gameSize.x -\r\n            this.state.gameSize.spacing * 2\r\n          }\r\n          height={\r\n            this.state.gameSize.containerY / this.state.gameSize.y -\r\n            this.state.gameSize.spacing * 2\r\n          }\r\n          spacing={this.state.gameSize.spacing}\r\n          handleCardFlip={this.handleCardFlip}\r\n          isFlipped={this.state.isFlipped}\r\n          img={this.pairs[cardItem]}\r\n        />\r\n      );\r\n    }\r\n    this.setState({\r\n      cards: this.cards,\r\n    });\r\n  };\r\n\r\n  checkCards = (currentFlipped) => {\r\n    if (currentFlipped.length > 1) {\r\n      if (currentFlipped[0].dataset.card === currentFlipped[1].dataset.card) {\r\n        this.currentFlipped = [];\r\n        this.found.push(currentFlipped[0].dataset.card);\r\n        document\r\n          .querySelectorAll(\r\n            `.flip-card[data-card = '${currentFlipped[0].dataset.card}']`\r\n          )\r\n          .forEach((element) => {\r\n            element.classList.add(\"won\");\r\n          });\r\n      } else {\r\n        setTimeout(() => {\r\n          document.querySelectorAll(\".flip-card\").forEach((element) => {\r\n            if (element.classList.contains(\"won\")) {\r\n              return;\r\n            } else {\r\n              element.children[0].classList.remove(\"flipped\");\r\n            }\r\n            this.currentFlipped = [];\r\n          });\r\n        }, 700);\r\n      }\r\n      this.checkWin();\r\n    }\r\n  };\r\n  checkWin = () => {\r\n    if (this.found.length === this.pairs.length / 2) console.log(\"WON!\");\r\n  };\r\n  handleCardFlip = (event) => {\r\n    let card = event.currentTarget.children[0];\r\n    if (event.currentTarget.classList.contains(\"won\")) return;\r\n    card.classList.add(\"flipped\");\r\n    this.currentFlipped.push(event.currentTarget);\r\n    this.checkCards(this.currentFlipped);\r\n  };\r\n  handleNewSize = (e) => {\r\n    let height = parseInt(e.target.value.split(\"x\")[0]);\r\n    let width = parseInt(e.target.value.split(\"x\")[1]);\r\n    this.setState({\r\n      gameSize: {\r\n        x: width,\r\n        y: height,\r\n        containerX: 600,\r\n        containerY: 600,\r\n        spacing: 16,\r\n      },\r\n    });\r\n    this.nbrPairs = (width * height) / 2;\r\n    this.init();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"container\">\r\n          <header>\r\n            <h1 className=\"title\">Memory</h1>\r\n            <select\r\n              className=\"form-control\"\r\n              name=\"\"\r\n              id=\"\"\r\n              onChange={(e) => this.handleNewSize(e)}\r\n            >\r\n              <option value=\"2x2\">2x2</option>\r\n              <option value=\"3x2\">3x2</option>\r\n              <option value=\"4x2\">2x4</option>\r\n              <option value=\"4x3\">3x4</option>\r\n              <option value=\"4x4\">4x4</option>\r\n            </select>\r\n          </header>\r\n          <div\r\n            style={{\r\n              width: this.state.gameSize.containerX + \"px\",\r\n              height: this.state.gameSize.containerY + \"px\",\r\n            }}\r\n            className=\"cards-container\"\r\n          >\r\n            {this.cards.map((card) => {\r\n              return card;\r\n            })}\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport Main from \"./components/main\";\n\nfunction App() {\n  return <Main />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}